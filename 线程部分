# Notes
进程：正在运行的程序

线程：就是进程中的一个独立控制单元，线程在控制着进程的执行。
      
一个进程至少有一个线程， Java Vm 启动的时候有一个进程java.exe
该进程中至少有一个线程负责Java程序的执行，而且这个线程的代码存在于main方法中，该线程称之为主线程。

扩展：细节说明虚拟机，jvm启动不止一个线程，还有一个垃圾回收机制线程
每次执行结果可能会不同，CPU执行到谁，谁运行
CPU做快速切换，已达到看上去同时运行的效果。形象的吧多线程运行理解为互相抢夺CPU的执行权。

如何在自定义一个线程？？？ Thread
1.继承Thread类      步骤：1. 定义类继承Thread。  2. 复写Thread类中的run方法  目的：将自定义的方法存储在run方法中   3.调用线程中的start方法 （有两个作用启动线程，调用run方法）

为什么使用run方法？？？？   用于存储线程要运行的代码，该存储功能就是run方法， 
线程有独立的一块内存区域。

currentThread():获取当前线程对象
getName():获取线程名称
                          
简单的买票程序：多窗口卖票  卖票代码被多个线程执行
设置static变量，大家共同使用
class Ticket extends Thread
{
	private static int tick = 100;
	public void run()
	{
		while(true)
		{
			if(tick > 0)
			{
			System.out.println(Thread.currentThread().getName() + "sale:" + tick--);
			}
		}
	}
}
public class TickDemo
{
	public static void main(String[] args)
	{
		Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
		Ticket t4 = new Ticket();
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}
}

但也存在弊端

创建线程第二种方式：实现Runable接口

步骤：1. 定义类实现Runable接口 2.覆盖Runable接口中run方法   3.通过Thread类建立线程对象  4.将Runable几口的的子类对象作为实际参数传递给Thread类的构造函数。
      5.调用Thread类的start方法开启线程并调用Runable接口子类的run方法。
      
  实现方式和继承方式有何区别？？？
  实现方式的好处：避免了单继承的方式
  
  继承Thread：线程代码存放在Thread自雷的run方法中
  实现Runnable：线程代码存放在接口的子类的run方法中。
  
  class Ticket implements Runnable
{
	private static int tick = 100;
	public void run()
	{
		while(true)
		{
			if(tick > 0)
			{
			System.out.println(Thread.currentThread().getName() + "sale:" + tick--);
			}
		}
	}
}
public class TickDemo
{
	public static void main(String[] args)
	{
		
		Ticket t = new Ticket();
		
		Thread t1 = new Thread(t);
		Thread t2 = new Thread(t);
		Thread t3 = new Thread(t);
		Thread t4 = new Thread(t);
		
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();		
		
		/*Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
		Ticket t4 = new Ticket();
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();*/
	}
}


多线程运行出现安全问题？？    
原因：：： 当多条语句在操作同意线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完

Java队多线程的安全提供了专业的解决方案。  就是同步代码块
     synchronized (对象) {需要被同步的代码}
对象如同锁。持有锁的线程可以再同步中执行。
没有持有锁的线程及时获得cpu的执行权，也进不去，因为没有锁
同步的前提：
1. 必须有两个或两个以上的线程。
2.必须多个线程使用同一个锁。
  必须保证同步中只能有一个线程在运行。

好处：解决多线程的安全问题
弊端：多个线程都需判断锁，较为消耗资源。
  
  如何找问题？？？？？？？？？？？？？？？？？
  1. 明确那些代码是多线程运行代码
  2. 明确共享数据
  3.明确多线程运行代码哪些语句是才做共享数据的。
  
  另一种用同步函数   ：   函数名前加   synchronized
  
  同步函数使用的是哪一个锁？？？？
  函数需要被对象调用，那么函数都有一个所属对象引用 ，就是this
  所以同步函数使用锁是   this  
  
  如果同步函数被静态修饰后，使用的锁是什么？？？？？？
  通过验证，发现不是this。因为静态方法中也不可以定义this
  静态进入内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。
  类名.class  该类对象的类型是class
  
  静态的同步方法， 使用的锁是该方法所在字节码文件对象
  
  懒汉式与饿汉时有何不同？？？？？？？？？
  
  //equals 判断内容是否相同
//equalsIgnoreCase 判断内容是否相同，并湖绿大小写
/*
 * 字符转换
 * 3.1 将字符数组转为字符串。
 * 构造函数 String(char[])
 *        String(char[], offset, count);将字符串数组中一部分转为字符串
 *        静态方法： static String copyValueof(char[])
 * 3.2 将字符串转为字符数组。
 * char[] toCharArrary();
 * 3.3 将字节数组转为字符串。
 *     String(Byte[]);
 * 3.4 将字符串转为字节数组。
 *     Byte[] getBytes();
 *     
 *4. 替换 String replace(oldchar, newchar);
 *   如果替换的字符不存在，返回原来的字符串
 *
 *5. 切割 String split(regex)
 *     
 *     
 */
public class Xuetest
{
	public static void methed_split()
	{
		String s = "zhangsan,lisi,wangwu,zhaoliu";
		String[] arr = s.split(",");
		System.out.println(arr[2]);
	}
	
	public static void sop(String str)
	{
		System.out.println(str);
	}
	
	public  static String myTrim(String str)
	{
		int start = 0, end = str.length()-1;
		while(start <= end && str.charAt(start) == ' ')
			start++;
		while (start <= end && str.charAt(end) == ' ')
			end--;
		return str.substring(start, end+1);
	}
	
	public static void main(String args[])
	{
		//methed_split();
		String s = "         123 789jjjj      ";
		sop(myTrim(s));
	}
}


/*
 * StringBuffer是字符串缓冲区，是一个容器
 *       1. 存储
 *         StringBuffer append():将指定数据作为参数添加到该已有数据的结尾处
 *         StringBuffer insert(index, 数据)
 *       2. 删除
 *         Stringbuffer delete(start, end) 包头不包尾
 *         StringBuffer deleteChatAt(index):删除指定位置的字符
 *       3. 获取
 *         char charAt(int index)
 *         int indexof(String str)
 *         int lastindexof)string str)
 *         int length();
 *         String substring(int start, int end)
 * 
 *       4. 修改
 *         StringBuffer replace(start, end, string);
 *         void setCharAt(int index, char ch);
 *         
 *       5. 反转
 *         StringBuffer reverse()
 *         
 *       6. 
 *       
 */
public class StringBufferDemo
{
	public static void main(String args[])
	{
		StringBuffer sb = new StringBuffer("woaini");
//		StringBuffer sb1 = sb.append(34);
//		sb.delete(1, 2);  //
//		sb.delete(0, sb.length()); //清空缓冲区
		
//		sop("sb==sb1"+(sb==sb1));
		sop(sb.toString());

	}
	
	public static void sop(String str)
	{
		System.out.println(str);
	}
}
  
 /*
 * StringBuilder是线程不同步
 * StringBuffer是线程同步
 * 以后开发建议使用Stringbuilder
 */

/*
 * 基本数据类型对象包装类
 * byte    Byte
 * short   Short
 * int     Integer等等
 * 最常见作用
 * 就是用于基本数据类型和字符串类型之间做转换
 * 
 * 基本数据类型转成字符串 ： 接班数据类型+""     ,    toString
 * 字符串转为基本数据类型
 */




























package com.xue;

/*
 * StringBuilder是线程不同步
 * StringBuffer是线程同步
 * 以后开发建议使用Stringbuilder
 */

/*
 * 基本数据类型对象包装类
 * byte    Byte
 * short   Short
 * int     Integer等等
 * 最常见作用
 * 就是用于基本数据类型和字符串类型之间做转换
 * 
 * 基本数据类型转成字符串 ： 接班数据类型+""     ,    toString
 * 字符串转为基本数据类型
 */
public class StringBufferDemo
{
	public static void mian(String[] args)
	{
		Integer x = new Integer("123");
		Integer y = new Integer(123);
		sop("x==y"+(x=y));
	}
	
	
	public static void sop(String str)
	{
		System.out.println(str);
	}
	
}















/*
 * StringBuffer是字符串缓冲区，是一个容器
 *       1. 存储
 *         StringBuffer append():将指定数据作为参数添加到该已有数据的结尾处
 *         StringBuffer insert(index, 数据)
 *       2. 删除
 *         Stringbuffer delete(start, end) 包头不包尾
 *         StringBuffer deleteChatAt(index):删除指定位置的字符
 *       3. 获取
 *         char charAt(int index)
 *         int indexof(String str)
 *         int lastindexof)string str)
 *         int length();
 *         String substring(int start, int end)
 * 
 *       4. 修改
 *         StringBuffer replace(start, end, string);
 *         void setCharAt(int index, char ch);
 *         
 *       5. 反转
 *         StringBuffer reverse()
 *         
 *       6. 
 *       
 */
/*public class StringBufferDemo
{
	public static void main(String args[])
	{
		StringBuffer sb = new StringBuffer("woaini");
//		StringBuffer sb1 = sb.append(34);
//		sb.delete(1, 2);  //
//		sb.delete(0, sb.length()); //清空缓冲区
		
//		sop("sb==sb1"+(sb==sb1));
		sop(sb.toString());

	}
	
	public static void sop(String str)
	{
		System.out.println(str);
	}
}
























/*
//equals 判断内容是否相同
//equalsIgnoreCase 判断内容是否相同，并湖绿大小写
/*
 * 字符转换
 * 3.1 将字符数组转为字符串。
 * 构造函数 String(char[])
 *        String(char[], offset, count);将字符串数组中一部分转为字符串
 *        静态方法： static String copyValueof(char[])
 * 3.2 将字符串转为字符数组。
 * char[] toCharArrary();
 * 3.3 将字节数组转为字符串。
 *     String(Byte[]);
 * 3.4 将字符串转为字节数组。
 *     Byte[] getBytes();
 *     
 *4. 替换 String replace(oldchar, newchar);
 *   如果替换的字符不存在，返回原来的字符串
 *
 *5. 切割 String split(regex)
 *     
 *     
 */
/*public class Xuetest
{
	public static void methed_split()
	{
		String s = "zhangsan,lisi,wangwu,zhaoliu";
		String[] arr = s.split(",");
		System.out.println(arr[2]);
	}
	
	public static void sop(String str)
	{
		System.out.println(str);
	}
	
	public  static String myTrim(String str)
	{
		int start = 0, end = str.length()-1;
		while(start <= end && str.charAt(start) == ' ')
			start++;
		while (start <= end && str.charAt(end) == ' ')
			end--;
		return str.substring(start, end+1);
	}
	
	public static void main(String args[])
	{
		//methed_split();
		String s = "         123 789jjjj      ";
		sop(myTrim(s));
	}
}















/*
class Test
{
	private boolean flag;
	Test(Boolean flag)
	{
		this.flag = flag;
	}
	public void run()
	{
		if(flag)
		{
			synchronized (MyLock.locka)
			{
				System.out.println("if locka");
				synchronized (MyLock.lockb) 
				{
					System.out.println("if lockb");
				}
				
			}
		}
		else
		{
			synchronized (MyLock.lockb)
			{
				System.out.println("else lockb");
				synchronized (MyLock.locka) 
				{
					System.out.println("else locka");
				}
				
			}
		}
	}
}
	
class MyLock
{
	static Object locka = new Object();
	static Object lockb = new Object();
}

public class DeadLockTest
{
	public static void main(String args[])
	{
		Thread t1 = new Thread(new Test(true));
		Thread t2 = new Thread(new Test(false));

		
	}
}


















/*class Ticket implements Runnable
{
	private static int tick = 100;
	Object obj = new Object();
	public void run()
	{
		while(true)
		{
			synchronized (obj) 
			{
				if(tick > 0)
				{
					try{Thread.sleep(10);}catch(Exception e){}
					System.out.println(Thread.currentThread().getName() + "sale:" + tick--);
				}
				
			}
			
		}
	}
}
public class TickDemo
{
	public static void main(String[] args)
	{
		
		Ticket t = new Ticket();
		
		Thread t1 = new Thread(t);
		Thread t2 = new Thread(t);
		Thread t3 = new Thread(t);
		Thread t4 = new Thread(t);
		
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
		
		
	
		Ticket t1 = new Ticket();
		Ticket t2 = new Ticket();
		Ticket t3 = new Ticket();
		Ticket t4 = new Ticket();
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}
}























/*
class Demo extends Thread
{
	Demo(String name)
	{
		super(name);
	}
	public void run()
	{
		for(int x=0; x<60; x++)
			//System.out.println(this.getName() + "demo run-------" + x);
			System.out.println(Thread.currentThread().getName() + "demo run-------" + x);
	}
}

public  class ThreadDemo
{
	public static void main(String[] args)
	{
		
		Demo d1 = new Demo("cao");
		Demo d2 = new Demo("gan");
		d1.start();
		d2.start();
		
		
		
	}
}

















/*class NoValueException extends Exception
{
	public NoValueException(String message) {
		super(message);
	}
}

interface Shape1     //计算面积接口
{
	void getArea();
}
class Rec implements Shape1
{
	private int len, wid;
	
	Rec(int len, int wid) throws NoValueException
	{
		if(len<=0 || wid<=0)
			throw new NoValueException("出现非法值");
		this.len = len;
		this.wid = wid;
	}
	public void getArea()
	{
		System.out.println(len*wid);
	}
}

class Circle implements Shape1
{
	private int radius;
	public static double PI = 3.14;
	Circle(int radius) throws NoValueException
	{
		if(radius <=0 )
			throw new NoValueException("半径为负数");
		this.radius = radius;
	}
	public void getArea()
	{
		System.out.println(radius*radius*PI);
	}
}




public class ExceptionDemo
{
	public static void main(String[] args)
	{
		
		try
		{
			Circle c = new Circle(-5);
			c.getArea();
			//Rec r = new Rec(-4, 5);
			//r.getArea();
		}
		catch (NoValueException e)
		{
			System.out.println(e.toString());
		}
		System.out.println("it's over");
	}
}
























/*class LanPingException extends Exception
{
	public LanPingException(String message) {
		super(message);
	}
}

class MaoYanException extends Exception
{
	public MaoYanException(String message) {
		super(message);
	}
}


class Computer
{
	
	private int state = 2; 
	public void run() throws LanPingException, MaoYanException
	{
		if (state==2)
			throw new LanPingException("蓝屏了");
		if (state==3)
			throw new MaoYanException("冒烟了");
		System.out.println("电脑运行");
	}
	public void reset()
	{
		
		state = 1;
		System.out.println("电脑重启");
		
	}
}



class Teacher
{
	private String  name;
	private Computer cmpt;
	Teacher(String name)
	{
		this.name = name;
		cmpt = new Computer();
	}
	public void prelect() throws NoPlanException
	{
		try
		{
			cmpt.run();
		}
		catch (LanPingException e)
		{
			cmpt.reset();
		}
		catch (MaoYanException e)
		{
			throw new NoPlanException("课时无法继续"+e.getMessage());
		}
		System.out.println("讲课");
	}
	
}

class NoPlanException extends Exception
{
	public NoPlanException(String message) {
		super(message);
	}
}

public class ExceptionDemo
{
	public static void main(String[] args)
	{
		Teacher t = new Teacher("薛老师");
		try
		{
			t.prelect();
		}
		catch(NoPlanException e)
		{
			System.out.println(e.toString());
			System.out.println("换老师");
		}
		
	}
}


















/*import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;

import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

public class DrawIcon implements Icon {
	private int width;
	private int heigth;
	public int getIconHeight(){
		return this.heigth;
	}
	public int getIconWidth(){
		return this.width;
	}
	
	public DrawIcon(int width, int heigth){
		this.width = width;
		this.heigth = heigth;
	}
	
	public void paintIcon(Component arg0, Graphics arg1, int x, int y){
		arg1.fillOval(x, y, width, heigth);
	}
	
	public static void main(String[] args){
		DrawIcon icon = new DrawIcon(15, 15);
		JLabel jl = new JLabel("测试", icon, SwingConstants.CENTER);
		JFrame jf = new JFrame("这是一个窗体");
		Container c = jf.getContentPane();
		c.add(jl);
		c.setBackground(Color.WHITE);
		jf.setVisible(true);
		jf.setSize(200, 150);
		jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	}

}*/
  
 /*
 * 集合框架
 * 为什么出现这么多的容器？    因为，每一个容器对数据的存储方式都有不同， 这个存储方式称之为： 数据结构
 * 1. add方法的参数类型是object，以便接收任意类型的对象。
 * 2. 集合中存储的都是对象的引用（地址）
 * 
 * 什么事迭代器？？  其实就是集合取出元素的方式。
 * 
 * 就把取出方式定义在集合的内部。这样取出方式就可以直接访问集合内容的元素。
 * 那么取出的方式被定义内部类，而每一个容器的数据结构不同，所以取出的动作细节不同，
 * 但是有共性内容   判断和取出  ，那么将写共性抽取
 * 
 * 那么这些内部类都符合一个规则。该规则是Iterator，如何获取集合的取出对象呢？
 * 通过一个对外提供的方法，iterator();
 * 
 * Collection
 *   --List 元素有序，元素可以重复。因为该集合体系有索引。
 *     --ArrayList:底层的数据结构使用的是数组结构，特点：查询速度快，但是增删稍慢
 *     --LinkedList:底层使用的是链表数据结构，依次往下问。查询速度慢，增删速度快
 *     --Vector:
 *   --Set  
 *   
 *   List： 特有的方法， 凡是可以操作交表的方法是该体系特有的方法。 
 *   增： add(index, element), addAll(index, Collection);
 *   删： remove(index);
 *   改：set(index, element)
 *   查：get(index); subList(from, to);listIterator();
 *   
 *   List集合特有的迭代器，ListIterator是Iterator的子接口，在迭代时，不可以通过集合对象的方法操作集合中
 *   的元素，所以在迭代时，只能用迭代器的方法操作元素，可是Iterator方法有限，只能对元素进行判断，取出，删除的操作
 *   如果想要其他操作如添加，修改等，就需要是要其子接口ListIterator，
 *   该接口只能通过List集合的ListIterator方法获取。
 *   
 * 
 */

import java.util.*;
public class Xue {
	
	public static void method_get()
	{
		ArrayList a1 = new ArrayList();
		//添加元素
		a1.add("java01");
		a1.add("java02");
		a1.add("java03");
		sop(a1);
		//指定位置添加元素
//		a1.add(1,"java09");
//		sop(a1);
		
		//删除指定位置的元素
//		a1.remove(2);
		
		//修改元素
//		a1.set(2, "java07");
		
		for (int x = 0; x < a1.size(); x++)
		{
			sop("a1("+ x + ") = " + a1.get(x));
		}
		
		Iterator it = a1.iterator();
		while(it.hasNext())
		{
			sop("next = " + it.next());
		}
		sop(a1);
	}
	
	public static void main(String[] args)
	{
		//演示列表迭代器 
		ArrayList a1 = new ArrayList();
		//添加元素
		a1.add("java01");
		a1.add("java02");
		a1.add("java03");
		
		
		
		
		ListIterator li = a1.listIterator();
		while(li.hasNext())
		{
			Object obj = li.next();
			if(obj.equals("java02"))
				li.add("java08");
		}
		while(li.hasPrevious())
		{
			Object obj = li.previous();
			if(obj.equals("java02"))
				li.add("java08");
		}
		
		sop(a1);
		
//		Iterator it = a1.iterator();
//		while(it.hasNext())
//		{
//			Object obj = it.next();
//			if(obj.equals("java02"))
//				a1.add("java08");
//			sop("obj = " + obj);
//		}
		
		
	}
  
  
  /*
 * 使用LinkedList模拟一个堆栈或队列数据结构；
 * 堆栈：先进后出
 * 队列：先进先出，如同一个水管
 */

class DuiLie
{
	private LinkedList link;
	
	DuiLie()
	{
		link = new LinkedList();
	}
	
	public void myAdd(Object obj)
	{
		link.addFirst(obj);
	}
	
	public Object myGet()
	{
		return link.removeLast();
	}
	public boolean isNull()
	{
		return link.isEmpty();
	}
	
}

public class LinkedListTest
{
	public static void main(String[] args)
	{
		DuiLie dl = new DuiLie();
		dl.myAdd("java01");
		dl.myAdd("java02");
		dl.myAdd("java03");
		dl.myAdd("java04");
		dl.myAdd("java05");
		while(!dl.isNull())
		{
			sop(dl.myGet());
		}
	}
	
	public static void sop(Object obj)
	{
		System.out.println(obj);
	}
}

  
  

/*
 * 去除ArrayListTest集合中重复的元素
 * 
 * 
 * 
 */
public class ArrayListTest
{
	public static void main(String[] args)
	{
		ArrayList a11 = new ArrayList();
		a11.add("java001");
		a11.add("java002");
		a11.add("java001");
		a11.add("java002");
		a11.add("java001");
		a11.add("java003");
		
		sop(a11);
		a11 = SingleElement(a11);
		sop(a11);
	}
	
	public static void sop(Object obj)
	{
		System.out.println(obj);
	}
	
	public static ArrayList SingleElement(ArrayList al)
	{
		//定义一个临时容器
		ArrayList newAl = new ArrayList();
		Iterator it = al.iterator();
		while(it.hasNext())
		{
			Object obj = it.next();
			
			if(!newAl.contains(obj))
			{
				newAl.add(obj);
			}			
		}
		return newAl;
		
	}
}















